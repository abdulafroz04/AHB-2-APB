module apb_controller(input hclk,hresetn,hwrite_reg,hwrite_reg1,hwriten,valid,
input [31:0]haddr,
input [31:0] hwdata,
input [31:0]hwdata_1,
input [31:0]hwdata_2,
input [31:0]haddr_1,
input [31:0]haddr_2,
input [31:0]pr_data,
input [2:0]temp_selx,
output reg penable,pwrite,
output reg hr_readyout,
output reg [2:0]psel,
output reg [31:0] paddr,
output reg [31:0] pwdata);
//temp variables
reg penable_temp,pwrite_temp,hr_readyout_temp;
reg [2:0] psel_temp;
reg [31:0] paddr_temp,pwdata_temp;


parameter ST_IDLE=3'b000,
	  ST_WWAIT=3'b001,
          ST_READ=3'b010,
	  ST_RENABLE=3'b011,
	  ST_WRITE=3'b100,
	  ST_WRITEP=3'b101,
	  ST_WENABLEP=3'b110,
	  ST_WENABLE=3'b111;


reg [2:0] present,next;


//present state logic

always@(posedge hclk)
begin
   if(!hresetn)
     present<=ST_IDLE;
   else
     present<=next;
end



//next state logic

always@(*)
begin
  next=ST_IDLE;
  case(present)
    ST_IDLE:  begin 
       	        if (valid ==1&& hwriten==0)
	          next=ST_READ;
                else if(valid ==1 && hwriten==1)
       	          next=ST_WWAIT;
	        else
                  next=ST_IDLE;
	      end
    ST_WWAIT:begin
        	if(valid==0)
               	   next=ST_WRITE;
	        else
	           next=ST_WRITEP;
	     end
    ST_WRITEP:next=ST_WENABLEP;
    ST_WENABLEP:begin
	           if(valid==0 && hwrite_reg==1)
         	      next=ST_WRITE;
                   else if(valid==1 && hwrite_reg==1)
	              next=ST_WRITEP;
	           else
	              next=ST_READ;
	        end
    ST_READ:next=ST_RENABLE;
    ST_RENABLE:begin
	           if(valid==0)
	               next=ST_IDLE;
  	           else if(valid==1 && hwriten==1)
	               next=ST_WWAIT;
	           else
	               next=ST_READ;
	       end
    ST_WRITE:begin
	       if(valid==1)
	          next=ST_WENABLEP;
 	       else
	          next=ST_WENABLE;
	       end
    ST_WENABLE:begin
	          if(valid==1 && hwriten==0)
	             next=ST_READ;
	          else if(valid==0)
	             next=ST_IDLE;
 	          else
	             next=ST_WWAIT;
	       end
     default: next=ST_IDLE;
    endcase
end
//output logic
//combinational
always @(*)
begin
 case(present)
    ST_IDLE:if(valid==1 && hwriten==0)
            begin
               paddr_temp=haddr;
       	       psel_temp=temp_selx;
               pwrite_temp=hwriten;
               penable_temp=0;
	       hr_readyout_temp=0;
	    end
            else if(valid==1 && hwriten==1)
            begin	
               psel_temp=0;
	       penable_temp=0; 
	       hr_readyout_temp=1;
	    end
            else
            begin
        	psel_temp=0;
        	penable_temp=0;
        	hr_readyout_temp=1;
       	    end
    ST_READ:  
    begin
              penable_temp = 1;
 	      hr_readyout_temp = 1;
    end
    ST_RENABLE: if(valid==1 && hwriten==0)
                begin
                  paddr_temp=haddr;
        	  psel_temp=temp_selx;
	          pwrite_temp=hwriten;
	          penable_temp=0;
	          hr_readyout_temp=0;
               end
 		else if(valid==1 && hwriten==1)
		begin
		  psel_temp=0;
	          penable_temp=0;
	          hr_readyout_temp=1;
	        end
               else 
               begin
	          psel_temp=0;
	          penable_temp=0;
	          hr_readyout_temp=1;
	       end

    ST_WWAIT:
    begin 
        paddr_temp=haddr_1;
   	pwdata_temp=hwdata;
	pwrite_temp=hwriten;
	psel_temp=temp_selx;
	penable_temp=0;
	hr_readyout_temp=0;
    end 
    
    ST_WRITE:
    begin 
        penable_temp=1;
	hr_readyout_temp=1;
    end
    
    ST_WENABLE:if(valid==1 && hwriten==0)
               begin
	        hr_readyout_temp=1;
	        psel_temp=0;
	        penable_temp=0;
       	       end
               else if(valid==1 && hwriten==1)
               begin
        	paddr_temp=haddr_1;
         	pwrite_temp=hwrite_reg;
         	psel_temp=temp_selx;
         	penable_temp=0;
        	hr_readyout_temp=0;
       	       end
               else
	       begin
	          hr_readyout_temp=1;
	          psel_temp=0;
	          penable_temp=0;
	       end
    ST_WRITE:
    begin
	penable_temp=1;
	hr_readyout_temp=1;
    end
    
    ST_WRITEP:
	begin
	paddr_temp=haddr_1;
	pwrite_temp=hwriten;
	pwdata_temp=hwdata;
	psel_temp=temp_selx;
	penable_temp=0;
	hr_readyout_temp=0;
    end  
  endcase
end
//sequential output logic
always@(posedge hclk)
begin
   if(!hresetn)
   begin
        paddr<=0;
        pwdata<=0;
        pwrite<=0;
        psel<=0;
        penable<=0;
        hr_readyout<=1;
   end
   else
   begin
        paddr<=paddr_temp;
        pwdata<=pwdata_temp;
        pwrite<=pwrite_temp;
        psel<=psel_temp;
        penable<=penable_temp;
        hr_readyout<=hr_readyout_temp;
   end
end

endmodule
