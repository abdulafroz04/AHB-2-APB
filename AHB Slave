module ahb_slave(input hclk,hresetn,hwriten,hready_in,
input [1:0] htrans,
input [31:0] hwdata,
input [31:0] haddr,pr_data,
output reg valid,hwrite_reg,hwrite_reg1,
output reg [31:0] haddr_1,
output reg [31:0] haddr_2,
output reg [31:0] hwdata_1,
output reg [31:0] hwdata_2,
output [31:0] hr_data,
output reg [2:0] temp_selx );


always@(posedge hclk)
begin 
if (!hresetn)
begin
haddr_1<=0;
haddr_2<=0;
end
else
begin
haddr_1<=haddr;
haddr_2<=haddr_1;
end
end

always@(posedge hclk)
begin 
if (!hresetn)
begin
hwdata_1<=0;
hwdata_2<=0;
end
else
begin
hwdata_1<=hwdata;
hwdata_2<=hwdata_1;
end
end

always@(posedge hclk)
begin 
if (!hresetn)
begin
hwrite_reg<=0;
hwrite_reg1<=0;
end
else
begin
hwrite_reg<=hwriten;
hwrite_reg1<=hwrite_reg;
end
end

always @(*)
begin
valid=1'b0;
if((hready_in==1) && (haddr>=32'h8000_0000) && (haddr<32'h8c00_0000) && htrans==2'b10 || htrans==2'b11)
valid=1;
else 
valid=0;
end


always @(*)
begin
temp_selx=3'b000;
if((haddr>=32'h8000_0000) && (haddr<32'h8400_0000))
temp_selx=3'b001;
else if((haddr>=32'h8400_0000) && (haddr<32'h8800_0000))
temp_selx=3'b010;
else if((haddr>=32'h8800_0000) && (haddr<32'h8c00_0000))
temp_selx=3'b100;
else 
temp_selx=0;
end
assign hr_data=pr_data;
endmodule
